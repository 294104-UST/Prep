
### **Q1. React: Specify a Loading Indicator**

**Question:** Which of the following can be used to specify a loading indicator while waiting for components?

**Correct Answer:** ✅ `React.Suspense`
**Explanation:** `React.Suspense` lets you specify a fallback (like a loading spinner) while lazy-loaded components are being rendered.

---

### **Q2. React `<select>` with Multiple Values**

**Question:** Correct syntax for a React `<select>` element with multiple selected values?

**Correct Answer:** ✅ `<select multiple={true} value={['B', 'C']}>`
**Explanation:** `value` should be an array when `multiple={true}`.

---

### **Q3. JSX: Invalid Component Usage**

**Question:** Which line will **not work** as expected?

```jsx
function SampleCode() {
  return <sample toWhat="Code" />; // Invalid
}
```

**Correct Answer:** ✅ `return <sample toWhat="Code" />;`
**Explanation:** JSX treats lowercase tags as HTML. Use `<Sample />` for custom components.

---

### **Q4. JavaScript Array Transformation**

**Question:** To print `[4, 8, 16, 32]` from `[2, 4, 8, 16]`?

**Correct Answer:** ✅ `input.map((input) => input * 2)`
**Explanation:** `.map()` transforms each element using the given function.

---

### **Q5. Angular Form Validation**

**Question:** What is being achieved by `forbiddenNameValidator(/Morning/i)`?

**Correct Answer:** ✅ A custom validator is being added to a reactive form.
**Explanation:** It's a custom validator inside the validators array.

---

### **Q6. TypeScript Class Implementation**

**Code:**

```ts
class NameChecker implements Checkable {
  check(s) { // L1
    return s.toLowercse() === "ok"; // L2
  }
}
```

**Correct Answer:** ✅ Both L1 and L2
**Explanation:**

* L1: Missing type annotation `(s: string)`
* L2: Typo `toLowercse()` → should be `toLowerCase()`

---

### **Q7. Optional Properties in TypeScript Interfaces**

**Question:** What happens if `colorThemeOverride` is set as `undefined`?

**Correct Answer:** ✅ It will allow most JavaScript runtime checks for the existence to pass.
**Explanation:** Optional properties can be `undefined` unless `exactOptionalPropertyTypes` is enabled.

---

### **Q8. Node.js `require()` Internals**

**Question:** Which function is wrapped by `Module.require()`?

**Correct Answer:** ✅ `Module._load`
**Explanation:** `Module.require()` internally calls `Module._load()` to load modules.

---

### **Q9. Angular Template Binding**

**Question:**

```html
<input [value]="foo" (change)="changeFn($event)">
<input [ngModel]="bar" (ngModelChange)="modelChangeFn($event)">
```

**Correct Answer:** ✅ Only 1
**Explanation:** Only the first input is valid. `ngModel` needs two-way binding (`[(ngModel)]`) or a control setup.

---

### **Q10. Node.js Event Order**

**Code:**

```js
function f1() {
  setImmediate(foo);
  process.nextTick(bar);
}
function f2() {
  f1();
  process.nextTick(too);
}
f2();
```

**Correct Answer:** ✅ `bar too foo`
**Explanation:**

1. `process.nextTick(bar)`
2. `process.nextTick(too)`
3. `setImmediate(foo)`

---

